plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

ext {
    GITHUB_TOKEN = System.getenv("GITHUB_TOKEN")
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    configurations {
        common {
            canBeResolved = true
            canBeConsumed = false
        }

        compileClasspath.extendsFrom common
        runtimeClasspath.extendsFrom common

        // Files in this configuration will be bundled into your mod using the Shadow plugin.
        // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
        shadowBundle {
            canBeResolved = true
            canBeConsumed = false
        }
    }
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        archivesName = project.archives_name + "-" + project.name
    }

    repositories {
        maven {
            url = uri("https://maven.pkg.github.com/chimericdream/*")
            credentials {
                username "chimericdream"
                password GITHUB_TOKEN
            }
        }

        maven {
            name 'Xander Maven'
            url 'https://maven.isxander.dev/releases'
        }

        maven {
            name = "Terraformers"
            url = "https://maven.terraformersmc.com/"
        }

        maven { url 'https://maven.blamejared.com' }

        maven {
            name = 'NeoForged'
            url = 'https://maven.neoforged.net/releases'
        }

        mavenLocal()
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.layered {
            it.mappings("net.fabricmc:yarn:$rootProject.yarn_mappings:v2")
            it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$rootProject.yarn_mappings_patch_neoforge_version")
        }
    }

    if (project.parent != null && project.parent.name !== 'chimeric-lib') {
        if (project.name == 'common') {
            dependencies {
                modImplementation "com.chimericdream.lib:chimericlib-common:${rootProject.chimericlib_version}"
            }
        }

        if (project.name == 'fabric') {
            dependencies {
                modImplementation "com.chimericdream.lib:chimericlib-fabric:${rootProject.chimericlib_version}"
            }
        }

        if (project.name == 'neoforge') {
            dependencies {
                modImplementation "com.chimericdream.lib:chimericlib-neoforge:${rootProject.chimericlib_version}"
            }
        }
    }

    if (project.name == 'common') {
        dependencies {
            modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
            modImplementation "dev.architectury:architectury:$rootProject.architectury_api_version"

//            modImplementation "vazkii.patchouli:Patchouli:${rootProject.patchouli_version}-FABRIC"

            modImplementation "dev.isxander:yet-another-config-lib:${rootProject.yacl_version}-fabric"
        }
    }

    if (project.name == 'fabric') {
        loom {
            runs {
//                configureEach {
//                    vmArg("-Dfabric.log.level=trace")
//                }

                gameTest {
                    server()
                    ideConfigGenerated(true)
                    vmArg "-Dfabric-api.gametest=1"
                }
            }
        }

        dependencies {
            modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
            modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
            modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

//            modImplementation "vazkii.patchouli:Patchouli:${rootProject.patchouli_version}-FABRIC"

            modImplementation("com.terraformersmc:modmenu:${rootProject.mod_menu_version}")
            modImplementation "dev.isxander:yet-another-config-lib:${rootProject.yacl_version}-fabric"
        }
    }

    if (project.name == 'neoforge') {
        dependencies {
            neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
            modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

//            modImplementation "vazkii.patchouli:Patchouli:${rootProject.patchouli_version}-NEOFORGE"

            modImplementation "dev.isxander:yet-another-config-lib:${rootProject.yacl_version}-neoforge"
            forgeRuntimeLibrary(runtimeOnly("org.quiltmc.parsers:json:0.2.1"))
            forgeRuntimeLibrary(runtimeOnly("org.quiltmc.parsers:gson:0.2.1"))
        }
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                version = "${rootProject.minecraft_compatibility}-${project.mod_version}"
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}
